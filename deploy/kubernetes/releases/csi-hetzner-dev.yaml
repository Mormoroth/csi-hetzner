# Copyright 2018 DigitalOcean
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
 
# Configuration to deploy release version of the CSI hetzner
# plugin (https://github.com/hetzner/csi-hetzner) compatible with
# Kubernetes >=v1.10.5
#
# example usage: kubectl create -f <this_file>

---

kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: hc-block-storage
  namespace: kube-system
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: cloud.hetzner.csi.dobs

---

apiVersion: csi.storage.k8s.io/v1alpha1
kind: CSIDriver
metadata:
  name: cloud.hetzner.csi.dobs
spec:
  attachRequired: true
  podInfoOnMountVersion: "v1"

---


##############################################
###########                       ############
###########   Controller plugin   ############
###########                       ############
##############################################

kind: StatefulSet
apiVersion: apps/v1beta1
metadata:
  name: csi-hc-controller
  namespace: kube-system
spec:
  serviceName: "csi-hc"
  replicas: 1
  template:
    metadata:
      labels:
        app: csi-hc-controller
        role: csi-hc
    spec:
      serviceAccount: csi-hc-controller-sa
      containers:
        - name: csi-provisioner
          image: quay.io/k8scsi/csi-provisioner:v0.3.0
          args:
            - "--provisioner=cloud.hetzner.csi.dobs"
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-attacher
          image: quay.io/k8scsi/csi-attacher:v0.3.0
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-hc-plugin
          image: zenjoy/hc-csi-plugin:dev
          args :
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--token=$(HETZNER_ACCESS_TOKEN)"
            - "--url=$(HETZNER_API_URL)"
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: HETZNER_API_URL
              value: https://api.hetzner.cloud/
            - name: HETZNER_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hetzner
                  key: access-token
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
      volumes:
        - name: socket-dir
          emptyDir: {}
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-hc-controller-sa
  namespace: kube-system

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-hc-controller-provisioner-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: csi-hc-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: system:csi-external-provisioner
  apiGroup: rbac.authorization.k8s.io

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-hc-controller-attacher-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: csi-hc-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: system:csi-external-attacher
  apiGroup: rbac.authorization.k8s.io

---


########################################
###########                 ############
###########   Node plugin   ############
###########                 ############
########################################

kind: DaemonSet
apiVersion: apps/v1beta2
metadata:
  name: csi-hc-node
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: csi-hc-node
  template:
    metadata:
      labels:
        app: csi-hc-node
        role: csi-hc
    spec:
      serviceAccount: csi-hc-node-sa
      hostNetwork: true
      containers:
        - name: driver-registrar
          image: quay.io/k8scsi/driver-registrar:v0.3.0
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/cloud.hetzner.csi.dobs/csi.sock              
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi/
            - name: registration-dir
              mountPath: /registration
        - name: csi-hc-plugin
          image: zenjoy/hc-csi-plugin:dev
          args :
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--token=$(HETZNER_ACCESS_TOKEN)"
            - "--url=$(HETZNER_API_URL)"
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            - name: HETZNER_API_URL
              value: https://api.hetzner.cloud/
            - name: HETZNER_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hetzner
                  key: access-token
          imagePullPolicy: "Always"
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet
              # needed so that any mounts setup inside this container are
              # propagated back to the host machine.
              mountPropagation: "Bidirectional"
            - name: device-dir
              mountPath: /dev
      volumes:
        # TODO(arslan): the registar is not implemented yet
        #- name: registrar-socket-dir
        #  hostPath:
        #    path: /var/lib/kubelet/device-plugins/
        #    type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins/
            type: Directory        
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/cloud.hetzner.csi.dobs
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-hc-node-sa
  namespace: kube-system

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-hc-driver-registrar-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: csi-hc-node-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-hc-driver-registrar-role
  apiGroup: rbac.authorization.k8s.io          


---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-hc-driver-registrar-role
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]

